// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// NextAuth tables

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bankAccounts  BankAccount[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// My tables

model Bank {
  id           Int           @id @default(autoincrement())
  name         String
  color        String
  bankAccounts BankAccount[]
}

model BankAccount {
  id      Int    @id @default(autoincrement())
  name    String
  type    String
  bank    Bank?  @relation(fields: [bankId], references: [id])
  bankId  Int?
  owner   User?  @relation(fields: [ownerId], references: [id])
  ownerId Int?
}

model Transaction {
  id                    Int                     @id @default(autoincrement())
  date                  DateTime
  label                 String
  value                 Decimal
  type                  TransactionType?        @relation(fields: [typeId], references: [id])
  typeId                Int?
  subcategory           TransactionSubcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId         Int?
  TransactionCategory   TransactionCategory?    @relation(fields: [transactionCategoryId], references: [id])
  transactionCategoryId Int?
}

model TransactionType {
  id          Int           @id @default(autoincrement())
  name        String
  Transaction Transaction[]
}

model TransactionCategory {
  id                     Int                      @id @default(autoincrement())
  name                   String
  color                  String
  Transaction            Transaction[]
  TransactionSubcategory TransactionSubcategory[]
}

model TransactionSubcategory {
  id          Int                  @id @default(autoincrement())
  name        String
  category    TransactionCategory? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  Transaction Transaction[]
}
